<<<<<<< HEAD
#Setup
rm(list=ls()) #Clear the Global Enviorement
setwd(getwd()) #Set the new directory to the script directory
# Load required libraries
library(readr)
library(dplyr)
library(ggplot2)
# Read the data set (uses readr)
column_types <- cols(
Survived = col_factor(),
Pclass = col_factor(ordered = TRUE),
Sex = col_factor(),
Embarked = col_factor()
)
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types, na ="...")
# Rename the factors to be human readable (uses dplyr)
train$Survived <- recode_factor(train$Survived,
"0" = "No",
"1" = "Yes")
train$Pclass <- recode_factor(train$Pclass,
"1" = "1st",
"2" = "2nd",
"3" = "3rd",
.ordered = TRUE)
train$Embarked <- recode_factor(train$Embarked,
"C" = "Cherbourg",
"S" = "Southampton",
"Q" = "Queenstown")
train$Cabin <- recode_factor(train$Cabin,
" " = "Unknown")
# View 'train' tibble
train
# Plots and stuff (uses ggplot2)
ggplot(data = train) + geom_point(mapping = aes(
x = Age,
y = Sex,
color = Survived
))
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types)
# Rename the factors to be human readable (uses dplyr)
train$Survived <- recode_factor(train$Survived,
"0" = "No",
"1" = "Yes")
train$Pclass <- recode_factor(train$Pclass,
"1" = "1st",
"2" = "2nd",
"3" = "3rd",
.ordered = TRUE)
train$Embarked <- recode_factor(train$Embarked,
"C" = "Cherbourg",
"S" = "Southampton",
"Q" = "Queenstown")
train$Cabin <- recode_factor(train$Cabin,
" " = "Unknown")
=======
.ordered = TRUE)
################################################################################
# Filtering
################################################################################
sanity_check <- function(my_df) {
for (j in 1:ncol(my_df)) {
print(paste(names(my_df[j]), ": ", sum(is.na(my_df[,j]))))
}
}
sanity_check(train)
>>>>>>> 08e2acf030fcb0fe033715799acffe9ed4157d4d
# View 'train' tibble
train
# Plots and stuff (uses ggplot2)
ggplot(data = train) + geom_point(mapping = aes(
x = Age,
y = Sex,
color = Survived
))
train$Age[is.na(train$Age)]=0
# View 'train' tibble
train
#making 0 all the NA ages
train$Cabin[is.na(train$Cabin)]="Unknown"
# View 'train' tibble
train
#making 0 all the NA ages
train$Cabin[is.na(train$Cabin)]="Unknown"
#making 0 all the NA ages
train$Cabin
#making 0 all the NA ages
train$Cabin[is.na(train$Cabin)]=0
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types, na ="unknown")
# Rename the factors to be human readable (uses dplyr)
train$Survived <- recode_factor(train$Survived,
"0" = "No",
"1" = "Yes")
train$Pclass <- recode_factor(train$Pclass,
"1" = "1st",
"2" = "2nd",
"3" = "3rd",
.ordered = TRUE)
train$Embarked <- recode_factor(train$Embarked,
"C" = "Cherbourg",
"S" = "Southampton",
"Q" = "Queenstown")
train$Cabin <- recode_factor(train$Cabin,
" " = "Unknown")
#making 0 all the NA ages
train$Age[is.na(train$Age)]=0
# View 'train' tibble
train
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types, na ="unknown")
# View 'train' tibble
train
#making 0 all the NA ages
train$Age[is.na(train$Age)]=0
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types)
#making 0 all the NA ages
train$Age[is.na(train$Age)]=0
# View 'train' tibble
train
# Rename the factors to be human readable (uses dplyr)
train$Survived <- recode_factor(train$Survived,
"0" = "No",
"1" = "Yes")
train$Pclass <- recode_factor(train$Pclass,
"1" = "1st",
"2" = "2nd",
"3" = "3rd",
.ordered = TRUE)
train$Embarked <- recode_factor(train$Embarked,
"C" = "Cherbourg",
"S" = "Southampton",
"Q" = "Queenstown")
#making 0 all the NA ages
train$Age[is.na(train$Age)]=0
# View 'train' tibble
train
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types, na.strings = c("foo", "bar"))
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types, na.char = c("foo", "bar"))
################################################################################
# Setup packages and settings
################################################################################
Sys.setenv(LANG = "en") # Set language to English
setwd(getwd()) # Set the working directory to the script directory
rm(list = ls()) # Clears the Global Env
# Install required packages
install.packages("tidyverse")
# Load required libraries
library(tidyverse) # Contains all tidyverse packages (ggplot2, dplyr, ...)
# Read the data set (uses readr)
column_types <- cols(
Survived = col_factor(),
Pclass = col_factor(include_na = TRUE, ordered = TRUE),
Sex = col_factor(),
Embarked = col_factor(include_na = TRUE, ordered = TRUE)
)
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types)
# Rename the factors to be human readable (uses dplyr)
train$Survived <- recode_factor(train$Survived,
"0" = "No",
"1" = "Yes")
train$Pclass <- recode_factor(train$Pclass,
"1" = "1st",
"2" = "2nd",
"3" = "3rd",
.default = "Unknown", # NA -> Unknown
.ordered = TRUE)
train$Embarked <- recode_factor(train$Embarked,
"S" = "Southampton (England)",
"C" = "Cherbourg (France)",
"Q" = "Queenstown (Ireland)",
.default = "Unknown", # NA -> Unknown
.ordered = TRUE)
################################################################################
# Filtering and cleaning
################################################################################
# Check for the number of NA's in each column
sanity_check <- function(my_df) {
for (j in 1:ncol(my_df)) {
print(paste(names(my_df[j]), ":", sum(is.na(my_df[, j]))))
}
}
sanity_check(train)
# View 'train' tibble
train
################################################################################
# Adding useful columns
################################################################################
# Add a total Family size column
train <- mutate(train, FamilySize = SibSp + Parch)
################################################################################
# Setup packages and settings
################################################################################
Sys.setenv(LANG = "en") # Set language to English
setwd(getwd()) # Set the working directory to the script directory
rm(list = ls()) # Clears the Global Env
# Install required packages
install.packages("tidyverse")
# Read the data set (uses readr)
column_types <- cols(
Survived = col_factor(),
Pclass = col_factor(include_na = TRUE, ordered = TRUE),
Sex = col_factor(),
Embarked = col_factor(include_na = TRUE, ordered = TRUE)
)
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types)
# Rename the factors to be human readable (uses dplyr)
train$Survived <- recode_factor(train$Survived,
"0" = "No",
"1" = "Yes")
train$Pclass <- recode_factor(train$Pclass,
"1" = "1st",
"2" = "2nd",
"3" = "3rd",
.default = "Unknown", # NA -> Unknown
.ordered = TRUE)
train$Embarked <- recode_factor(train$Embarked,
"S" = "Southampton (England)",
"C" = "Cherbourg (France)",
"Q" = "Queenstown (Ireland)",
.default = "Unknown", # NA -> Unknown
.ordered = TRUE)
################################################################################
# Filtering and cleaning
################################################################################
# Check for the number of NA's in each column
sanity_check <- function(my_df) {
for (j in 1:ncol(my_df)) {
print(paste(names(my_df[j]), ":", sum(is.na(my_df[, j]))))
}
}
sanity_check(train)
# View 'train' tibble
train
install.packages("tidyverse")
# View 'train' tibble
train
################################################################################
# Setup packages and settings
################################################################################
Sys.setenv(LANG = "en") # Set language to English
setwd(getwd()) # Set the working directory to the script directory
rm(list = ls()) # Clears the Global Env
# Install required packages
install.packages("tidyverse")
# Load required libraries
library(tidyverse) # Contains all tidyverse packages (ggplot2, dplyr, ...)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
################################################################################
# Setup packages and settings
################################################################################
Sys.setenv(LANG = "en") # Set language to English
setwd(getwd()) # Set the working directory to the script directory
rm(list = ls()) # Clears the Global Env
# Install required packages
install.packages("tidyverse")
install.packages("tidyverse")
# Load required libraries
library(tidyverse) # Contains all tidyverse packages (ggplot2, dplyr, ...)
remove.packages("dplyr")
# Install required packages
install.packages("tidyverse")
install.packages("tidyverse")
# Load required libraries
library(tidyverse) # Contains all tidyverse packages (ggplot2, dplyr, ...)
# Read the data set (uses readr)
column_types <- cols(
Survived = col_factor(),
Pclass = col_factor(include_na = TRUE, ordered = TRUE),
Sex = col_factor(),
Embarked = col_factor(include_na = TRUE, ordered = TRUE)
)
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types)
# Rename the factors to be human readable (uses dplyr)
train$Survived <- recode_factor(train$Survived,
"0" = "No",
"1" = "Yes")
train$Pclass <- recode_factor(train$Pclass,
"1" = "1st",
"2" = "2nd",
"3" = "3rd",
.default = "Unknown", # NA -> Unknown
.ordered = TRUE)
train$Embarked <- recode_factor(train$Embarked,
"S" = "Southampton (England)",
"C" = "Cherbourg (France)",
"Q" = "Queenstown (Ireland)",
.default = "Unknown", # NA -> Unknown
.ordered = TRUE)
################################################################################
# Filtering and cleaning
################################################################################
# Check for the number of NA's in each column
sanity_check <- function(my_df) {
for (j in 1:ncol(my_df)) {
print(paste(names(my_df[j]), ":", sum(is.na(my_df[, j]))))
}
}
sanity_check(train)
# View 'train' tibble
train
################################################################################
# Adding useful columns
################################################################################
# Add a total Family size column
train <- mutate(train, FamilySize = SibSp + Parch)
tail(train)
# Embarked and Fare prices
ggplot(data = train, mapping = aes(x = Embarked, y = Fare))+
geom_boxplot()
# Male Female survival percentage
ggplot(data = train, mapping = aes(x = Sex, fill = Survived)) +
geom_bar(position = "fill")
<<<<<<< HEAD
=======
# Male Pclass survival percentage
ggplot(data = train, mapping = aes(x = Pclass, fill = Survived)) +
geom_bar(position = "fill")
# Male FamilySize survival percentage
ggplot(data = train, mapping = aes(x = FamilySize, fill = Survived)) +
geom_histogram(position = "fill") +
facet_wrap(~ Sex)
# Male FamilySize survival percentage
ggplot(data = train, mapping = aes(x = FamilySize, fill = Survived)) +
geom_bar(position = "fill") +
facet_wrap(~ Sex)
install.packages(c("cli", "crayon", "evaluate", "isoband", "jsonlite", "lifecycle", "purrr", "renv", "rlang", "rmarkdown", "tinytex", "vctrs"))
################################################################################
# Setup packages and settings
################################################################################
Sys.setenv(LANG = "en") # Set language to English
#Hello! just starting..
################################################################################
# Setup packages and settings
################################################################################
Sys.setenv(LANG = "en") # Set language to English
setwd(getwd()) # Set the working directory to the script directory
rm(list = ls()) # Clears the Global Env
# Install required packages
install.packages("tidyverse")
# Load required libraries
library(tidyverse) # Contains all tidyverse packages (ggplot2, dplyr, ...)
################################################################################
# Read and import the data set
################################################################################
# Read the data set (uses readr)
column_types <- cols(
Survived = col_factor(),
Pclass = col_factor(include_na = TRUE, ordered = TRUE),
Sex = col_factor(),
Embarked = col_factor(include_na = TRUE, ordered = TRUE)
)
train <- read_csv("./kaggle/titanic/train.csv", col_types = column_types)
# Rename the factors to be human readable (uses dplyr)
train$Survived <- recode_factor(train$Survived,
"0" = "No",
"1" = "Yes")
train$Pclass <- recode_factor(train$Pclass,
"1" = "1st",
"2" = "2nd",
"3" = "3rd",
.default = "Unknown", # NA -> Unknown
.ordered = TRUE)
train$Embarked <- recode_factor(train$Embarked,
"S" = "Southampton (England)",
"C" = "Cherbourg (France)",
"Q" = "Queenstown (Ireland)",
.default = "Unknown", # NA -> Unknown
.ordered = TRUE)
################################################################################
# Filtering and cleaning
################################################################################
# Check for the number of NA's in each column
sanity_check <- function(my_df) {
for (j in 1:ncol(my_df)) {
print(paste(names(my_df[j]), ":", sum(is.na(my_df[, j]))))
}
}
sanity_check(train)
# View 'train' tibble
train
################################################################################
# Adding useful columns
################################################################################
# Add a total Family size column
train <- mutate(train, FamilySize = SibSp + Parch)
tail(train)
################################################################################
# Plots and stuff (uses ggplot2)
################################################################################
# Embarked and Fare prices
ggplot(data = train, mapping = aes(x = Embarked, y = Fare))+
geom_boxplot()
# Male Female survival percentage
ggplot(data = train, mapping = aes(x = Sex, fill = Survived)) +
geom_bar(position = "fill")
# Male Pclass survival percentage
ggplot(data = train, mapping = aes(x = Pclass, fill = Survived)) +
geom_bar(position = "fill")
# Male FamilySize survival percentage
ggplot(data = train, mapping = aes(x = FamilySize, fill = Survived)) +
geom_bar(position = "fill") +
facet_wrap(~ Sex)
>>>>>>> 08e2acf030fcb0fe033715799acffe9ed4157d4d
